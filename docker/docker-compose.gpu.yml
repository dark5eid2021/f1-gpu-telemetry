# F1 GPU Telemetry System - Docker Compose for Local Development
version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: f1-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - f1-network

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: f1-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - f1-network

  # Redis cache
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: f1-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - f1-network

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    hostname: timescaledb
    container_name: f1-timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: f1_telemetry
      POSTGRES_USER: f1user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-f1pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U f1user -d f1_telemetry"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - f1-network

  # F1 GPU Processor (main application)
  f1-gpu-processor:
    build:
      context: .
      dockerfile: docker/gpu-processor.Dockerfile
    hostname: f1-gpu-processor
    container_name: f1-gpu-processor
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics port
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      
      # GPU settings
      - CUDA_VISIBLE_DEVICES=0
      - GPU_BATCH_SIZE=512
      - GPU_MEMORY_FRACTION=0.6
      
      # Service connections
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://f1user:${POSTGRES_PASSWORD:-f1pass}@timescaledb:5432/f1_telemetry
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
      # Security (use real values in production!)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-change-this}
      - API_SECRET_KEY=${API_SECRET_KEY:-dev-api-secret-change-this}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-32-char-encryption-key-here}
      
      # F1 API
      - OPENF1_API_KEY=${OPENF1_API_KEY:-}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - f1-network

  # F1 Web Application (React frontend)
  f1-web-app:
    build:
      context: .
      dockerfile: docker/web-app.Dockerfile
    hostname: f1-web-app
    container_name: f1-web-app
    depends_on:
      f1-gpu-processor:
        condition: service_healthy
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - f1-network

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: f1-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - f1-network
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: f1-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - f1-network
    profiles:
      - monitoring

# Networks
networks:
  f1-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local