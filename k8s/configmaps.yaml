# F1 GPU Telemetry System - ConfigMaps
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: f1-config
  namespace: f1-system
  labels:
    app: f1-gpu-telemetry
    component: config
data:
  # Kafka Configuration
  kafka-bootstrap-servers: "kafka:9092"
  kafka-telemetry-topic: "f1-telemetry"
  kafka-predictions-topic: "f1-predictions"
  kafka-positions-topic: "f1-positions"
  
  # Redis Configuration
  redis-host: "redis"
  redis-port: "6379"
  redis-db: "0"
  
  # Database Configuration
  database-url: "postgresql://f1user:password@timescaledb:5432/f1_telemetry"
  postgres-host: "timescaledb"
  postgres-port: "5432"
  postgres-db: "f1_telemetry"
  postgres-user: "f1user"
  
  # GPU Configuration
  gpu-batch-size: "1024"
  gpu-memory-fraction: "0.8"
  
  # Application Configuration
  api-host: "0.0.0.0"
  api-port: "8000"
  log-level: "INFO"
  environment: "production"
  
  # F1 API Configuration
  openf1-base-url: "https://api.openf1.org/v1"
  
  # Performance Configuration
  telemetry-sampling-rate: "50"
  max-workers: "4"
  prediction-cache-ttl: "60"
  
  # Monitoring Configuration
  prometheus-enabled: "true"
  prometheus-port: "8001"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: f1-system
  labels:
    app: f1-gpu-telemetry
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"
    
    scrape_configs:
      - job_name: 'f1-gpu-processor'
        static_configs:
          - targets: ['f1-gpu-processor:8001']
        metrics_path: '/metrics'
        scrape_interval: 5s
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - f1-system
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - f1-system
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name