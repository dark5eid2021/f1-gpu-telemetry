# ============================================================================
# .env.example - Template for environment variables
# Copy this to .env and fill in your actual values
# This file CAN be committed to git as it contains no secrets
# ============================================================================

# F1 API Configuration
OPENF1_API_KEY=your_openf1_api_key_here
OPENF1_BASE_URL=https://api.openf1.org/v1

# Weather API (Optional)
WEATHER_API_KEY=your_weather_api_key_here
WEATHER_API_URL=https://api.openweathermap.org/data/2.5

# Database Configuration
DATABASE_URL=postgresql://f1user:your_password_here@localhost:5432/f1_telemetry
POSTGRES_USER=f1user
POSTGRES_PASSWORD=your_secure_password_here
POSTGRES_DB=f1_telemetry

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password_here

# Kafka Configuration
KAFKA_BOOTSTRAP_SERVERS=localhost:9092
KAFKA_SECURITY_PROTOCOL=PLAINTEXT
KAFKA_SASL_USERNAME=your_kafka_username_here
KAFKA_SASL_PASSWORD=your_kafka_password_here

# GPU Configuration
CUDA_VISIBLE_DEVICES=0,1,2,3
GPU_BATCH_SIZE=1024
GPU_MEMORY_FRACTION=0.8

# Application Configuration
API_HOST=0.0.0.0
API_PORT=8000
DEBUG=false
LOG_LEVEL=INFO

# Security
JWT_SECRET_KEY=your_super_secret_jwt_key_here
API_SECRET_KEY=your_api_secret_key_here
ENCRYPTION_KEY=your_32_character_encryption_key

# Monitoring
PROMETHEUS_ENABLED=true
GRAFANA_ADMIN_PASSWORD=your_grafana_password_here

# Cloud Provider Credentials (if using cloud deployment)
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-west-2

GCP_SERVICE_ACCOUNT_KEY_PATH=/path/to/service-account.json
GCP_PROJECT_ID=your_gcp_project_id

AZURE_CLIENT_ID=your_azure_client_id
AZURE_CLIENT_SECRET=your_azure_client_secret
AZURE_TENANT_ID=your_azure_tenant_id

# Container Registry
DOCKER_REGISTRY=your-registry.com
DOCKER_USERNAME=your_docker_username
DOCKER_PASSWORD=your_docker_password

# Kubernetes Secrets (for reference - use kubectl to create)
K8S_NAMESPACE=f1-system

---
# ============================================================================
# .env.development - Development environment (NOT committed)
# Copy .env.example to this file and customize for local development
# ============================================================================

# F1 API Configuration (Development)
OPENF1_API_KEY=dev_api_key_here
OPENF1_BASE_URL=https://api.openf1.org/v1

# Local Database
DATABASE_URL=postgresql://f1user:devpassword123@localhost:5432/f1_telemetry_dev
POSTGRES_USER=f1user
POSTGRES_PASSWORD=devpassword123
POSTGRES_DB=f1_telemetry_dev

# Local Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=""

# Local Kafka
KAFKA_BOOTSTRAP_SERVERS=localhost:9092
KAFKA_SECURITY_PROTOCOL=PLAINTEXT

# Development GPU Settings
CUDA_VISIBLE_DEVICES=0
GPU_BATCH_SIZE=512
GPU_MEMORY_FRACTION=0.6

# Development API
API_HOST=127.0.0.1
API_PORT=8000
DEBUG=true
LOG_LEVEL=DEBUG

# Development Security (use weak passwords for local dev)
JWT_SECRET_KEY=dev_jwt_secret_not_for_production
API_SECRET_KEY=dev_api_secret_not_for_production
ENCRYPTION_KEY=dev_32_char_key_not_for_prod_use

# Development Monitoring
PROMETHEUS_ENABLED=true
GRAFANA_ADMIN_PASSWORD=admin123

---
# ============================================================================
# secrets/kubernetes-secrets.yaml.example
# Template for Kubernetes secrets - DO NOT commit actual secrets
# ============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: f1-secrets
  namespace: f1-system
type: Opaque
data:
  # Base64 encode your actual values:
  # echo -n "your_actual_value" | base64
  
  openf1-api-key: eW91cl9vcGVuZjFfYXBpX2tleV9oZXJl  # your_openf1_api_key_here
  postgres-password: eW91cl9zZWN1cmVfcGFzc3dvcmRfaGVyZQ==  # your_secure_password_here
  redis-password: eW91cl9yZWRpc19wYXNzd29yZF9oZXJl  # your_redis_password_here
  jwt-secret-key: eW91cl9zdXBlcl9zZWNyZXRfand0X2tleV9oZXJl  # your_super_secret_jwt_key_here
  api-secret-key: eW91cl9hcGlfc2VjcmV0X2tleV9oZXJl  # your_api_secret_key_here
  encryption-key: eW91cl8zMl9jaGFyYWN0ZXJfZW5jcnlwdGlvbl9rZXk=  # your_32_character_encryption_key
  grafana-admin-password: eW91cl9ncmFmYW5hX3Bhc3N3b3JkX2hlcmU=  # your_grafana_password_here

---
# Docker Registry Secret
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: f1-system
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJ5b3VyLXJlZ2lzdHJ5LmNvbSI6eyJ1c2VybmFtZSI6InlvdXJfdXNlcm5hbWUiLCJwYXNzd29yZCI6InlvdXJfcGFzc3dvcmQiLCJhdXRoIjoiWW05MWNsOTFjMlZ5Ym1GdFpUcDViM1Z5WDNCaGMzTjNiM0prIn19fQ==

---
# ============================================================================
# scripts/setup-secrets.sh - Script to create Kubernetes secrets
# ============================================================================

#!/bin/bash

# F1 GPU Telemetry System - Secrets Setup Script
# This script reads from .env file and creates Kubernetes secrets

set -e

echo "üîê Setting up Kubernetes secrets for F1 GPU Telemetry System..."

# Check if .env file exists
if [ ! -f ".env" ]; then
    echo "‚ùå .env file not found. Please copy .env.example to .env and fill in your values."
    exit 1
fi

# Source the .env file
source .env

# Validate required secrets
required_vars=(
    "OPENF1_API_KEY"
    "POSTGRES_PASSWORD"
    "JWT_SECRET_KEY"
    "API_SECRET_KEY"
    "ENCRYPTION_KEY"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå Required variable $var is not set in .env file"
        exit 1
    fi
done

# Create namespace if it doesn't exist
kubectl create namespace f1-system --dry-run=client -o yaml | kubectl apply -f -

# Create main secrets
kubectl create secret generic f1-secrets \
    --from-literal=openf1-api-key="$OPENF1_API_KEY" \
    --from-literal=postgres-password="$POSTGRES_PASSWORD" \
    --from-literal=redis-password="$REDIS_PASSWORD" \
    --from-literal=jwt-secret-key="$JWT_SECRET_KEY" \
    --from-literal=api-secret-key="$API_SECRET_KEY" \
    --from-literal=encryption-key="$ENCRYPTION_KEY" \
    --from-literal=grafana-admin-password="$GRAFANA_ADMIN_PASSWORD" \
    --namespace=f1-system \
    --dry-run=client -o yaml | kubectl apply -f -

# Create Docker registry secret (if credentials provided)
if [ ! -z "$DOCKER_USERNAME" ] && [ ! -z "$DOCKER_PASSWORD" ]; then
    kubectl create secret docker-registry docker-registry-secret \
        --docker-server="$DOCKER_REGISTRY" \
        --docker-username="$DOCKER_USERNAME" \
        --docker-password="$DOCKER_PASSWORD" \
        --namespace=f1-system \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "‚úÖ Docker registry secret created"
fi

# Create cloud provider secrets (if using cloud deployment)
if [ ! -z "$AWS_ACCESS_KEY_ID" ] && [ ! -z "$AWS_SECRET_ACCESS_KEY" ]; then
    kubectl create secret generic aws-credentials \
        --from-literal=access-key-id="$AWS_ACCESS_KEY_ID" \
        --from-literal=secret-access-key="$AWS_SECRET_ACCESS_KEY" \
        --from-literal=region="$AWS_REGION" \
        --namespace=f1-system \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "‚úÖ AWS credentials secret created"
fi

if [ ! -z "$GCP_SERVICE_ACCOUNT_KEY_PATH" ] && [ -f "$GCP_SERVICE_ACCOUNT_KEY_PATH" ]; then
    kubectl create secret generic gcp-credentials \
        --from-file=service-account.json="$GCP_SERVICE_ACCOUNT_KEY_PATH" \
        --from-literal=project-id="$GCP_PROJECT_ID" \
        --namespace=f1-system \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "‚úÖ GCP credentials secret created"
fi

if [ ! -z "$AZURE_CLIENT_ID" ] && [ ! -z "$AZURE_CLIENT_SECRET" ]; then
    kubectl create secret generic azure-credentials \
        --from-literal=client-id="$AZURE_CLIENT_ID" \
        --from-literal=client-secret="$AZURE_CLIENT_SECRET" \
        --from-literal=tenant-id="$AZURE_TENANT_ID" \
        --namespace=f1-system \
        --dry-run=client -o yaml | kubectl apply -f -
    echo "‚úÖ Azure credentials secret created"
fi

echo "üéâ All secrets created successfully!"
echo ""
echo "To verify secrets:"
echo "kubectl get secrets -n f1-system"
echo ""
echo "To view a secret (base64 decoded):"
echo "kubectl get secret f1-secrets -n f1-system -o jsonpath='{.data.openf1-api-key}' | base64 -d"

---
# ============================================================================
# config/config.py - Configuration management with environment variables
# ============================================================================

import os
from typing import Optional
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
env_file = Path(__file__).parent.parent / '.env'
if env_file.exists():
    load_dotenv(env_file)

class Config:
    """Base configuration class that loads from environment variables"""
    
    # F1 API Configuration
    OPENF1_API_KEY: str = os.getenv('OPENF1_API_KEY', '')
    OPENF1_BASE_URL: str = os.getenv('OPENF1_BASE_URL', 'https://api.openf1.org/v1')
    
    # Weather API
    WEATHER_API_KEY: str = os.getenv('WEATHER_API_KEY', '')
    WEATHER_API_URL: str = os.getenv('WEATHER_API_URL', 'https://api.openweathermap.org/data/2.5')
    
    # Database Configuration
    DATABASE_URL: str = os.getenv('DATABASE_URL', 'postgresql://f1user:password@localhost:5432/f1_telemetry')
    POSTGRES_USER: str = os.getenv('POSTGRES_USER', 'f1user')
    POSTGRES_PASSWORD: str = os.getenv('POSTGRES_PASSWORD', 'password')
    POSTGRES_DB: str = os.getenv('POSTGRES_DB', 'f1_telemetry')
    
    # Redis Configuration
    REDIS_HOST: str = os.getenv('REDIS_HOST', 'localhost')
    REDIS_PORT: int = int(os.getenv('REDIS_PORT', '6379'))
    REDIS_PASSWORD: Optional[str] = os.getenv('REDIS_PASSWORD')
    
    # Kafka Configuration
    KAFKA_BOOTSTRAP_SERVERS: str = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')
    KAFKA_SECURITY_PROTOCOL: str = os.getenv('KAFKA_SECURITY_PROTOCOL', 'PLAINTEXT')
    KAFKA_SASL_USERNAME: Optional[str] = os.getenv('KAFKA_SASL_USERNAME')
    KAFKA_SASL_PASSWORD: Optional[str] = os.getenv('KAFKA_SASL_PASSWORD')
    
    # GPU Configuration
    CUDA_VISIBLE_DEVICES: str = os.getenv('CUDA_VISIBLE_DEVICES', '0')
    GPU_BATCH_SIZE: int = int(os.getenv('GPU_BATCH_SIZE', '1024'))
    GPU_MEMORY_FRACTION: float = float(os.getenv('GPU_MEMORY_FRACTION', '0.8'))
    
    # Application Configuration
    API_HOST: str = os.getenv('API_HOST', '0.0.0.0')
    API_PORT: int = int(os.getenv('API_PORT', '8000'))
    DEBUG: bool = os.getenv('DEBUG', 'false').lower() == 'true'
    LOG_LEVEL: str = os.getenv('LOG_LEVEL', 'INFO')
    
    # Security
    JWT_SECRET_KEY: str = os.getenv('JWT_SECRET_KEY', 'your-secret-key-change-this')
    API_SECRET_KEY: str = os.getenv('API_SECRET_KEY', 'your-api-secret-change-this')
    ENCRYPTION_KEY: str = os.getenv('ENCRYPTION_KEY', 'your-32-char-encryption-key-here')
    
    # Monitoring
    PROMETHEUS_ENABLED: bool = os.getenv('PROMETHEUS_ENABLED', 'true').lower() == 'true'
    GRAFANA_ADMIN_PASSWORD: str = os.getenv('GRAFANA_ADMIN_PASSWORD', 'admin123')
    
    # Cloud Provider Credentials
    AWS_ACCESS_KEY_ID: Optional[str] = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY: Optional[str] = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_REGION: str = os.getenv('AWS_REGION', 'us-west-2')
    
    GCP_SERVICE_ACCOUNT_KEY_PATH: Optional[str] = os.getenv('GCP_SERVICE_ACCOUNT_KEY_PATH')
    GCP_PROJECT_ID: Optional[str] = os.getenv('GCP_PROJECT_ID')
    
    AZURE_CLIENT_ID: Optional[str] = os.getenv('AZURE_CLIENT_ID')
    AZURE_CLIENT_SECRET: Optional[str] = os.getenv('AZURE_CLIENT_SECRET')
    AZURE_TENANT_ID: Optional[str] = os.getenv('AZURE_TENANT_ID')
    
    # Container Registry
    DOCKER_REGISTRY: str = os.getenv('DOCKER_REGISTRY', 'docker.io')
    DOCKER_USERNAME: Optional[str] = os.getenv('DOCKER_USERNAME')
    DOCKER_PASSWORD: Optional[str] = os.getenv('DOCKER_PASSWORD')
    
    @classmethod
    def validate_required_secrets(cls) -> bool:
        """Validate that all required secrets are present"""
        required_secrets = [
            cls.OPENF1_API_KEY,
            cls.POSTGRES_PASSWORD,
            cls.JWT_SECRET_KEY,
            cls.API_SECRET_KEY,
            cls.ENCRYPTION_KEY
        ]
        
        missing_secrets = [secret for secret in required_secrets if not secret or secret.startswith('your_')]
        
        if missing_secrets:
            print(f"‚ùå Missing required secrets: {len(missing_secrets)} secrets not configured")
            print("Please check your .env file and ensure all required values are set")
            return False
        
        return True
    
    @classmethod
    def get_redis_config(cls) -> dict:
        """Get Redis connection configuration"""
        config = {
            'host': cls.REDIS_HOST,
            'port': cls.REDIS_PORT,
            'decode_responses': True
        }
        
        if cls.REDIS_PASSWORD:
            config['password'] = cls.REDIS_PASSWORD
        
        return config
    
    @classmethod
    def get_kafka_config(cls) -> dict:
        """Get Kafka connection configuration"""
        config = {
            'bootstrap_servers': cls.KAFKA_BOOTSTRAP_SERVERS.split(','),
            'security_protocol': cls.KAFKA_SECURITY_PROTOCOL
        }
        
        if cls.KAFKA_SASL_USERNAME and cls.KAFKA_SASL_PASSWORD:
            config.update({
                'sasl_mechanism': 'PLAIN',
                'sasl_plain_username': cls.KAFKA_SASL_USERNAME,
                'sasl_plain_password': cls.KAFKA_SASL_PASSWORD
            })
        
        return config

class DevelopmentConfig(Config):
    """Development configuration with debug settings"""
    DEBUG = True
    LOG_LEVEL = 'DEBUG'

class ProductionConfig(Config):
    """Production configuration with security settings"""
    DEBUG = False
    LOG_LEVEL = 'INFO'

class TestingConfig(Config):
    """Testing configuration"""
    DEBUG = True
    DATABASE_URL = 'postgresql://test:test@localhost:5432/f1_telemetry_test'

# Configuration factory
def get_config() -> Config:
    """Get configuration based on environment"""
    env = os.getenv('ENVIRONMENT', 'development').lower()
    
    if env == 'production':
        return ProductionConfig()
    elif env == 'testing':
        return TestingConfig()
    else:
        return DevelopmentConfig()

---
# ============================================================================
# README-SECRETS.md - Documentation for secrets management
# ============================================================================

# Secrets Management for F1 GPU Telemetry System

This document explains how to properly manage secrets and sensitive configuration in the F1 GPU Telemetry System.

## üîê Overview

We use environment variables and Kubernetes secrets to manage sensitive information like API keys, passwords, and certificates. **Never commit actual secrets to git.**

## üìÅ File Structure

```
f1-gpu-telemetry/
‚îú‚îÄ‚îÄ .env.example          # Template with placeholder values (committed)
‚îú‚îÄ‚îÄ .env                  # Your actual secrets (NOT committed)
‚îú‚îÄ‚îÄ .env.development      # Development secrets (NOT committed)
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ config.py         # Configuration management
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îî‚îÄ‚îÄ setup-secrets.sh  # Kubernetes secrets setup
‚îî‚îÄ‚îÄ secrets/
    ‚îî‚îÄ‚îÄ kubernetes-secrets.yaml.example  # K8s secret template
```

## üöÄ Quick Setup

1. **Copy the example file:**
   ```bash
   cp .env.example .env
   ```

2. **Edit `.env` with your actual values:**
   ```bash
   # Replace placeholder values with real ones
   OPENF1_API_KEY=your_actual_api_key_here
   POSTGRES_PASSWORD=your_secure_password_123
   # ... etc
   ```

3. **For Kubernetes deployment:**
   ```bash
   chmod +x scripts/setup-secrets.sh
   ./scripts/setup-secrets.sh
   ```

## üîë Required Secrets

### Core Secrets (Required)
- `OPENF1_API_KEY` - Your OpenF1 API key for real-time data
- `POSTGRES_PASSWORD` - Database password
- `JWT_SECRET_KEY` - JWT token signing key
- `API_SECRET_KEY` - API authentication key
- `ENCRYPTION_KEY` - 32-character encryption key

### Optional Secrets
- `WEATHER_API_KEY` - Weather data API key
- `REDIS_PASSWORD` - Redis password (if using auth)
- `GRAFANA_ADMIN_PASSWORD` - Grafana admin password
- Cloud provider credentials (AWS, GCP, Azure)

## üõ°Ô∏è Security Best Practices

1. **Never commit secrets to git**
2. **Use strong, unique passwords**
3. **Rotate secrets regularly**
4. **Use different secrets for different environments**
5. **Limit secret access with RBAC**

## üîß Development vs Production

### Development
- Use `.env.development` for local development
- Can use weaker passwords for convenience
- Enable debug logging

### Production
- Use strong, randomly generated secrets
- Disable debug mode
- Use Kubernetes secrets for container deployment

## üìù Environment Variables Reference

See `.env.example` for a complete list of all configurable environment variables.

## üö® Troubleshooting

### Missing Secrets Error
If you see "Missing required secrets" error:
1. Check that `.env` file exists
2. Verify all required variables are set
3. Ensure no placeholder values remain

### Kubernetes Secrets Issues
```bash
# Check if secrets exist
kubectl get secrets -n f1-system

# View secret contents (base64 encoded)
kubectl get secret f1-secrets -n f1-system -o yaml

# Decode a specific secret
kubectl get secret f1-secrets -n f1-system -o jsonpath='{.data.openf1-api-key}' | base64 -d
```

## üîÑ Updating Secrets

### Local Development
1. Edit `.env` file
2. Restart application

### Kubernetes
1. Update secrets:
   ```bash
   kubectl create secret generic f1-secrets \
     --from-literal=openf1-api-key="new_api_key" \
     --namespace=f1-system \
     --dry-run=client -o yaml | kubectl apply -f -
   ```
2. Restart pods to pick up new secrets:
   ```bash
   kubectl rollout restart deployment/f1-gpu-processor -n f1-system
   ```

Remember: **Security is everyone's responsibility!** üîí